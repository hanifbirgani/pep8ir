# SOME DESCRIPTIVE TITLE.
# Copyright (C) Sphinx team
# This file is distributed under the same license as the PEP8 فارسی package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Hanif Birgani, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEP8 فارسی 1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-21 01:52+0430\n"
"PO-Revision-Date: 2021-06-20 21:47+0000\n"
"Last-Translator: Hanif Birgani, 2021\n"
"Language-Team: Persian (https://www.transifex.com/persian-pep8/teams/121944/fa/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: fa\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../_pep8.rst:2
msgid "Introduction"
msgstr "مقدمه"

#: ../../_pep8.rst:4
msgid ""
"This document gives coding conventions for the Python code comprising the "
"standard library in the main Python distribution.  Please see the companion "
"informational PEP describing style guidelines for the C code in the C "
"implementation of Python [1]_."
msgstr ""
"این شیوه‌نامه، نحوه نگارش کدهای پایتون و قراردادهای کدنویسی پایتون را بر "
"اساس کتابخانه اصلی پایتون ارائه می‌دهد. لطفاً برای آگاهی از نحوه نگارش کدهای"
" زبان C در هسته پایتون به شیوه‌نامه مرتبط با آن مراجعه کنید [1]_. در این متن"
" از واژه «پپ» (PEP) برای اشاره به استانداردهای مختلف زبان پایتون استفاده "
"می‌شود، PEP مخفف عبارت Python Enhancement Proposal (طرح پیشنهادی بهبود "
"پایتون) است."

#: ../../_pep8.rst:9
msgid ""
"This document and PEP 257 (Docstring Conventions) were adapted from Guido's "
"original Python Style Guide essay, with some additions from Barry's style "
"guide [2]_."
msgstr ""
"این راهنما و پپ ۲۵۷ (قراردادهای حاشیه‌نویسی) از مقاله اصلی جناب خیدو فان "
"روسوم [خالق پایتون] درباره نحوه نگارش کدهای پایتون و همچنین راهنمای کدنویسی "
"آقای بری ورشو [توسعه‌دهنده گنو Mailman] الهام گرفته شده است [2]_."

#: ../../_pep8.rst:13
msgid ""
"This style guide evolves over time as additional conventions are identified "
"and past conventions are rendered obsolete by changes in the language "
"itself."
msgstr ""
"این شیوه‌نامه با گذشت زمان، پدید آمدن قراردادهای تازه و همچنین منسوخ شدن "
"قراردادهای پیشین تکامل می‌یابد."

#: ../../_pep8.rst:17
msgid ""
"Many projects have their own coding style guidelines. In the event of any "
"conflicts, such project-specific guides take precedence for that project."
msgstr ""
"بسیاری از پروژه‌ها راهنمای نگارش کد مخصوص به خود را دارند. در صورت بروز هر "
"گونه تداخل بین این شیوه‌نامه و نحوه نگارش اختصاصی یک پروژه، راهنمای نگارش آن"
" پروژه در اولویت است."

#: ../../_pep8.rst:22
msgid "A Foolish Consistency is the Hobgoblin of Little Minds"
msgstr "ثبات ناشیانه، عامل عقب‌ماندگی مغزهای کوچک است"

#: ../../_pep8.rst:24
msgid ""
"One of Guido's key insights is that code is read much more often than it is "
"written.  The guidelines provided here are intended to improve the "
"readability of code and make it consistent across the wide spectrum of "
"Python code.  As PEP 20 says, \"Readability counts\"."
msgstr ""
"یکی از بینش‌های کلیدی خیدو این است که کدها بیش از آن که نوشته شوند، خوانده "
"می‌شوند. نکات مطرح شده در این شیوه‌نامه برای بهبود خوانایی (قابلیت خوانده "
"شدن) کدهای پایتون و یکدست کردن آن‌ها در طیف وسیع است. همان‌طور که در پپ ۲۰ "
"گفته شده: «خوانایی مهم است»."

#: ../../_pep8.rst:29
msgid ""
"A style guide is about consistency.  Consistency with this style guide is "
"important.  Consistency within a project is more important. Consistency "
"within one module or function is the most important."
msgstr ""
"این شیوه‌نامه مستقیماً با «ثبات» در نحوه نگارش کدها مرتبط است. ثبات در این "
"شیوه‌نامه بسیار با اهمیت است. ثباتِ درون‌پروژه‌ای از آن هم مهم‌تر است. ثبات "
"درون یک ماژول یا یک تابع مهم‌ترین اصل است."

#: ../../_pep8.rst:33
msgid ""
"However, know when to be inconsistent -- sometimes style guide "
"recommendations just aren't applicable.  When in doubt, use your best "
"judgment.  Look at other examples and decide what looks best.  And don't "
"hesitate to ask!"
msgstr ""
"اما بدانید که کجا بهتر است بی‌ثبات باشید — گاهی اوقات اجرای این شیوه‌نامه "
"امکان‌پذیر نیست. وقتی شک داشتید، وجدان خود را قاضی کنید. به دیگر نمونه کدها "
"نگاه کنید و بر آن اساس بهترین تصمیم را بگیرید. از پرسیدن سوال نترسید!"

#: ../../_pep8.rst:38
msgid ""
"In particular: do not break backwards compatibility just to comply with this"
" PEP!"
msgstr ""
"به طور خاص: برای رعایت و اجرای این شیوه‌نامه، سازگاری کد با نگارش‌های پیشین "
"[نرم‌افزار] را بر هم نزنید!"

#: ../../_pep8.rst:41
msgid "Some other good reasons to ignore a particular guideline:"
msgstr "دلایل خوب دیگری برای نادیده گرفتن اصول این شیوه‌نامه:"

#: ../../_pep8.rst:43
msgid ""
"When applying the guideline would make the code less readable, even for "
"someone who is used to reading code that follows this PEP."
msgstr ""
"هنگامی که بکارگیری این شیوه‌نامه باعث شود خوانایی کد پایین بیاید، حتی زمانی "
"که خوانندهٔ کد هم از این شیوه‌نامه پیروی کند."

#: ../../_pep8.rst:46
msgid ""
"To be consistent with surrounding code that also breaks it (maybe for "
"historic reasons) -- although this is also an opportunity to clean up "
"someone else's mess (in true XP style)."
msgstr ""
"برای یکدست بودن با دیگر کدهایی که از قبل در پروژه موجود است -- هرچند این "
"شاید فرصتی برای پاکسازی خرابکاری دیگران هم باشد."

#: ../../_pep8.rst:50
msgid ""
"Because the code in question predates the introduction of the guideline and "
"there is no other reason to be modifying that code."
msgstr ""
"کدهای موجود، قبل از بوجود آمدن این شیوه‌نامه نوشته شده‌اند و دلیل دیگری (بجز"
" اعمال این شیوه‌نامه) برای بازنویسی آن‌ها وجود ندارد."

#: ../../_pep8.rst:53
msgid ""
"When the code needs to remain compatible with older versions of Python that "
"don't support the feature recommended by the style guide."
msgstr ""
"وقتی نیاز است کدها با نگارش‌های قدیمی پایتون سازگار باشند و نگارش‌های قدیمی "
"پایتون از روش‌های گفته شده در این شیوه‌نامه پشتیبانی نکنند."

#: ../../_pep8.rst:58
msgid "Code Lay-out"
msgstr "چیدمان کد"

#: ../../_pep8.rst:61
msgid "Indentation"
msgstr "تورفتگی"

#: ../../_pep8.rst:63
msgid "Use 4 spaces per indentation level."
msgstr "برای هر پله تورفتگی از ۴ فاصله استفاده کنید."

#: ../../_pep8.rst:65
msgid ""
"Continuation lines should align wrapped elements either vertically using "
"Python's implicit line joining inside parentheses, brackets and braces, or "
"using a *hanging indent* [#fn-hi]_.  When using a hanging indent the "
"following should be considered; there should be no arguments on the first "
"line and further indentation should be used to clearly distinguish itself as"
" a continuation line::"
msgstr ""
"خطوط ادامه‌دار بهتر است عناصر خود را به صورت عمودی هم‌تراز کنند، این کار "
"می‌تواند با چیدن عناصر زیر یکدیگر درون پرانتزها، کروشه‌ها و براکت‌ها، و یا "
"استفاده از تورفتگی‌های هم‌اندازه در خطوط اضافی انجام شود [#fn-hi]_. هنگام "
"استفاده از تورفتگی در خطوط ادامه‌دار به این نکته توجه داشته باشید که شکل "
"ظاهری کدها باید به گونه‌ای باشد که خوانندهٔ کد به سادگی متوجه شود این "
"تورفتگی‌ها مربوط به شکسته شدن یک خط بلند و ادامه‌دار است."

#: ../../_pep8.rst:103
msgid "The 4-space rule is optional for continuation lines."
msgstr "رعایت قانون ۴-فاصله برای خطوط ادامه‌دار الزامی نیست."

#: ../../_pep8.rst:105
msgid "Optional::"
msgstr "اختیاری::"

#: ../../_pep8.rst:114
msgid ""
"When the conditional part of an ``if``-statement is long enough to require "
"that it be written across multiple lines, it's worth noting that the "
"combination of a two character keyword (i.e. ``if``), plus a single space, "
"plus an opening parenthesis creates a natural 4-space indent for the "
"subsequent lines of the multiline conditional.  This can produce a visual "
"conflict with the indented suite of code nested inside the ``if``-statement,"
" which would also naturally be indented to 4 spaces.  This PEP takes no "
"explicit position on how (or whether) to further visually distinguish such "
"conditional lines from the nested suite inside the ``if``-statement. "
"Acceptable options in this situation include, but are not limited to::"
msgstr ""
"زمانی که بخش شرطی یک دستور ``if`` ترکیبی طولانی باشد، به گونه‌ای که مجبور "
"باشیم آن را در چند خط بنویسیم، با توجه به اینکه خود دستور ``if`` از دو حرف "
"تشکیل شده و پس از آن نیز یک فاصله و پرانتز قرار می‌گیرد، می‌توانیم خطوط "
"اضافی شرط را با رعایت ۴ فاصله زیر خط اصلی بنویسیم. گرچه این امر سبب بوجود "
"آمدن یک تداخل بینایی می‌شود که در نتیجه آن شرط‌های دستور ``if`` از دستورات "
"بلوک زیر آن به سختی قابل تفکیک خواهند بود، زیرا دستورات داخل بلوک شرطی هم "
"باید ۴ فاصله تورفتگی داشته باشند. این شیوه‌نامه توصیه خاصی برای ایجاد تمایز "
"بین شرط‌های اصلی و دستورات درون بلوک شرطی ندارد. برخی گزینه‌های قابل قبول به"
" شرح زیر هستند::"

#: ../../_pep8.rst:142
msgid ""
"(Also see the discussion of whether to break before or after binary "
"operators below.)"
msgstr ""

#: ../../_pep8.rst:145
msgid ""
"The closing brace/bracket/parenthesis on multiline constructs may either "
"line up under the first non-whitespace character of the last line of list, "
"as in::"
msgstr ""

#: ../../_pep8.rst:158
msgid ""
"or it may be lined up under the first character of the line that starts the "
"multiline construct, as in::"
msgstr ""

#: ../../_pep8.rst:171
msgid "Tabs or Spaces?"
msgstr "تب یا فاصله؟"

#: ../../_pep8.rst:173
msgid "Spaces are the preferred indentation method."
msgstr "برای ایجاد تورفتگی بهتر است از فاصله استفاده شود."

#: ../../_pep8.rst:175
msgid ""
"Tabs should be used solely to remain consistent with code that is already "
"indented with tabs."
msgstr ""
"استفاده از تب تنها زمانی ارجحیت دارد که بخواهیم با کدهای از پیش موجود هماهنگ"
" شویم، یعنی کدهای قدیمی که در آن‌ها از تب برای ایجاد تورفتگی استفاده شده "
"است."

#: ../../_pep8.rst:178
msgid "Python 3 disallows mixing the use of tabs and spaces for indentation."
msgstr ""
"استفاده همزمان و مخلوط از فاصله و تب برای ایجاد تورفتگی در پایتون ۳ مجاز "
"نیست."

#: ../../_pep8.rst:180
msgid ""
"Python 2 code indented with a mixture of tabs and spaces should be converted"
" to using spaces exclusively."
msgstr ""
"کدهای پایتون ۲ که در آن‌ها از تب و فاصله به صورت ترکیبی برای ایجاد تورفتگی "
"استفاده شده باید به گونه‌ای بازنویسی شوند که فقط از فاصله برای ایجاد تورفتگی"
" استفاده شود."

#: ../../_pep8.rst:183
msgid ""
"When invoking the Python 2 command line interpreter with the ``-t`` option, "
"it issues warnings about code that illegally mixes tabs and spaces.  When "
"using ``-tt`` these warnings become errors. These options are highly "
"recommended!"
msgstr ""
"هنگامی که از رابط خط فرمان پایتون ۲ با گزینه ``-t`` استفاده شود، درباره "
"استفاده از ترکیبی از تب و فاصله در کد به ما پیام هشدار داده می‌شود. این "
"هشدارها در صورت استفاده از پرچم ``-tt`` تبدیل به پیام خطا می‌شوند. استفاده "
"از این گزینه‌ها در پایتون ۲ به شدت پیشنهاد می‌شود."

#: ../../_pep8.rst:189
msgid "Maximum Line Length"
msgstr "بیشترین طول خط"

#: ../../_pep8.rst:191
msgid "Limit all lines to a maximum of 79 characters."
msgstr "بیشترین اندازه یک خط باید نهایتاً ۷۹ حرف باشد."

#: ../../_pep8.rst:193
msgid ""
"For flowing long blocks of text with fewer structural restrictions "
"(docstrings or comments), the line length should be limited to 72 "
"characters."
msgstr ""

#: ../../_pep8.rst:197
msgid ""
"Limiting the required editor window width makes it possible to have several "
"files open side by side, and works well when using code review tools that "
"present the two versions in adjacent columns."
msgstr ""

#: ../../_pep8.rst:201
msgid ""
"The default wrapping in most tools disrupts the visual structure of the "
"code, making it more difficult to understand. The limits are chosen to avoid"
" wrapping in editors with the window width set to 80, even if the tool "
"places a marker glyph in the final column when wrapping lines. Some web "
"based tools may not offer dynamic line wrapping at all."
msgstr ""

#: ../../_pep8.rst:207
msgid ""
"Some teams strongly prefer a longer line length.  For code maintained "
"exclusively or primarily by a team that can reach agreement on this issue, "
"it is okay to increase the line length limit up to 99 characters, provided "
"that comments and docstrings are still wrapped at 72 characters."
msgstr ""

#: ../../_pep8.rst:213
msgid ""
"The Python standard library is conservative and requires limiting lines to "
"79 characters (and docstrings/comments to 72)."
msgstr ""
"کتابخانه استاندارد پایتون بسیار محافظه‌کار است و لازم است که تمام خطوط آن "
"کمتر از ۷۹ حرف باشند. همچنین حاشیه‌نویسی‌ها و مستندات باید کمتر از ۷۲ حرف "
"باشند."

#: ../../_pep8.rst:216
msgid ""
"The preferred way of wrapping long lines is by using Python's implied line "
"continuation inside parentheses, brackets and braces.  Long lines can be "
"broken over multiple lines by wrapping expressions in parentheses. These "
"should be used in preference to using a backslash for line continuation."
msgstr ""

#: ../../_pep8.rst:222
msgid ""
"Backslashes may still be appropriate at times.  For example, long, multiple "
"``with``-statements cannot use implicit continuation, so backslashes are "
"acceptable::"
msgstr ""

#: ../../_pep8.rst:230
msgid ""
"(See the previous discussion on `multiline if-statements`_ for further "
"thoughts on the indentation of such multiline ``with``-statements.)"
msgstr ""

#: ../../_pep8.rst:233
msgid "Another such case is with ``assert`` statements."
msgstr "مورد دیگر با دستور ``assert`` است."

#: ../../_pep8.rst:235
msgid "Make sure to indent the continued line appropriately."
msgstr "مطمئن شوید که تورفتگی خطوط ادامه‌دار را رعایت کنید."

#: ../../_pep8.rst:238
msgid "Should a Line Break Before or After a Binary Operator?"
msgstr ""

#: ../../_pep8.rst:240
msgid ""
"For decades the recommended style was to break after binary operators. But "
"this can hurt readability in two ways: the operators tend to get scattered "
"across different columns on the screen, and each operator is moved away from"
" its operand and onto the previous line.  Here, the eye has to do extra work"
" to tell which items are added and which are subtracted::"
msgstr ""

#: ../../_pep8.rst:255
msgid ""
"To solve this readability problem, mathematicians and their publishers "
"follow the opposite convention.  Donald Knuth explains the traditional rule "
"in his *Computers and Typesetting* series: \"Although formulas within a "
"paragraph always break after binary operations and relations, displayed "
"formulas always break before binary operations\" [3]_."
msgstr ""

#: ../../_pep8.rst:261
msgid ""
"Following the tradition from mathematics usually results in more readable "
"code::"
msgstr ""

#: ../../_pep8.rst:272
msgid ""
"In Python code, it is permissible to break before or after a binary "
"operator, as long as the convention is consistent locally.  For new code "
"Knuth's style is suggested."
msgstr ""

#: ../../_pep8.rst:277
msgid "Blank Lines"
msgstr "خطوط خالی"

#: ../../_pep8.rst:279
msgid ""
"Surround top-level function and class definitions with two blank lines."
msgstr "قبل از تعریف توابع سطح بالا و کلاس‌ها از دو خط خالی استفاده کنید."

#: ../../_pep8.rst:282
msgid ""
"Method definitions inside a class are surrounded by a single blank line."
msgstr "قبل از تعریف متدها درون کلاس، از یک خط خالی استفاده کنید."

#: ../../_pep8.rst:285
msgid ""
"Extra blank lines may be used (sparingly) to separate groups of related "
"functions.  Blank lines may be omitted between a bunch of related one-liners"
" (e.g. a set of dummy implementations)."
msgstr ""

#: ../../_pep8.rst:289
msgid "Use blank lines in functions, sparingly, to indicate logical sections."
msgstr ""

#: ../../_pep8.rst:291
msgid ""
"Python accepts the control-L (i.e. ^L) form feed character as whitespace; "
"Many tools treat these characters as page separators, so you may use them to"
" separate pages of related sections of your file. Note, some editors and "
"web-based code viewers may not recognize control-L as a form feed and will "
"show another glyph in its place."
msgstr ""

#: ../../_pep8.rst:298
msgid "Source File Encoding"
msgstr "کدبندی فایل"

#: ../../_pep8.rst:300
msgid ""
"Code in the core Python distribution should always use UTF-8 (or ASCII in "
"Python 2)."
msgstr ""

#: ../../_pep8.rst:303
msgid ""
"Files using ASCII (in Python 2) or UTF-8 (in Python 3) should not have an "
"encoding declaration."
msgstr ""

#: ../../_pep8.rst:306
msgid ""
"In the standard library, non-default encodings should be used only for test "
"purposes or when a comment or docstring needs to mention an author name that"
" contains non-ASCII characters; otherwise, using ``\\x``, ``\\u``, ``\\U``, "
"or ``\\N`` escapes is the preferred way to include non-ASCII data in string "
"literals."
msgstr ""

#: ../../_pep8.rst:312
msgid ""
"For Python 3.0 and beyond, the following policy is prescribed for the "
"standard library (see PEP 3131): All identifiers in the Python standard "
"library MUST use ASCII-only identifiers, and SHOULD use English words "
"wherever feasible (in many cases, abbreviations and technical terms are used"
" which aren't English). In addition, string literals and comments must also "
"be in ASCII. The only exceptions are (a) test cases testing the non-ASCII "
"features, and (b) names of authors. Authors whose names are not based on the"
" Latin alphabet (latin-1, ISO/IEC 8859-1 character set) MUST provide a "
"transliteration of their names in this character set."
msgstr ""

#: ../../_pep8.rst:323
msgid ""
"Open source projects with a global audience are encouraged to adopt a "
"similar policy."
msgstr ""

#: ../../_pep8.rst:327
msgid "Imports"
msgstr "ایمپورت"

#: ../../_pep8.rst:329
msgid "Imports should usually be on separate lines::"
msgstr "ایمپورت‌ها بهتر است در خطوط جداگانه باشند::"

#: ../../_pep8.rst:341
msgid "It's okay to say this though::"
msgstr ""

#: ../../_pep8.rst:346
msgid ""
"Imports are always put at the top of the file, just after any module "
"comments and docstrings, and before module globals and constants."
msgstr ""

#: ../../_pep8.rst:349
msgid "Imports should be grouped in the following order:"
msgstr "ایمپورت‌ها باید به ترتیب زیر گروه‌بندی شوند:"

#: ../../_pep8.rst:351
msgid "Standard library imports."
msgstr "ایمپورت‌های کتابخانه استاندارد."

#: ../../_pep8.rst:352
msgid "Related third party imports."
msgstr "ایمپورت کتابخانه‌های شخص ثالث."

#: ../../_pep8.rst:353
msgid "Local application/library specific imports."
msgstr "ایمپورت کتابخانه‌ها و کدهای محلی (local)."

#: ../../_pep8.rst:355
msgid "You should put a blank line between each group of imports."
msgstr "شما باید بین هر گروه از ایمپورت‌ها یک خط خالی قرار دهید."

#: ../../_pep8.rst:357
msgid ""
"Absolute imports are recommended, as they are usually more readable and tend"
" to be better behaved (or at least give better error messages) if the import"
" system is incorrectly configured (such as when a directory inside a package"
" ends up on ``sys.path``)::"
msgstr ""

#: ../../_pep8.rst:366
msgid ""
"However, explicit relative imports are an acceptable alternative to absolute"
" imports, especially when dealing with complex package layouts where using "
"absolute imports would be unnecessarily verbose::"
msgstr ""

#: ../../_pep8.rst:373
msgid ""
"Standard library code should avoid complex package layouts and always use "
"absolute imports."
msgstr ""

#: ../../_pep8.rst:376
msgid ""
"Implicit relative imports should *never* be used and have been removed in "
"Python 3."
msgstr ""

#: ../../_pep8.rst:379
msgid ""
"When importing a class from a class-containing module, it's usually okay to "
"spell this::"
msgstr ""

#: ../../_pep8.rst:385
msgid ""
"If this spelling causes local name clashes, then spell them explicitly::"
msgstr ""

#: ../../_pep8.rst:390
msgid "and use \"myclass.MyClass\" and \"foo.bar.yourclass.YourClass\"."
msgstr ""

#: ../../_pep8.rst:392
msgid ""
"Wildcard imports (``from <module> import *``) should be avoided, as they "
"make it unclear which names are present in the namespace, confusing both "
"readers and many automated tools. There is one defensible use case for a "
"wildcard import, which is to republish an internal interface as part of a "
"public API (for example, overwriting a pure Python implementation of an "
"interface with the definitions from an optional accelerator module and "
"exactly which definitions will be overwritten isn't known in advance)."
msgstr ""

#: ../../_pep8.rst:401
msgid ""
"When republishing names this way, the guidelines below regarding public and "
"internal interfaces still apply."
msgstr ""

#: ../../_pep8.rst:405
msgid "Module Level Dunder Names"
msgstr ""

#: ../../_pep8.rst:407
msgid ""
"Module level \"dunders\" (i.e. names with two leading and two trailing "
"underscores) such as ``__all__``, ``__author__``, ``__version__``, etc. "
"should be placed after the module docstring but before any import statements"
" *except* ``from __future__`` imports.  Python mandates that future-imports "
"must appear in the module before any other code except docstrings::"
msgstr ""

#: ../../_pep8.rst:430
msgid "String Quotes"
msgstr ""

#: ../../_pep8.rst:432
msgid ""
"In Python, single-quoted strings and double-quoted strings are the same.  "
"This PEP does not make a recommendation for this.  Pick a rule and stick to "
"it.  When a string contains single or double quote characters, however, use "
"the other one to avoid backslashes in the string. It improves readability."
msgstr ""

#: ../../_pep8.rst:438
msgid ""
"For triple-quoted strings, always use double quote characters to be "
"consistent with the docstring convention in PEP 257."
msgstr ""

#: ../../_pep8.rst:443
msgid "Whitespace in Expressions and Statements"
msgstr ""

#: ../../_pep8.rst:446
msgid "Pet Peeves"
msgstr ""

#: ../../_pep8.rst:448
msgid "Avoid extraneous whitespace in the following situations:"
msgstr ""

#: ../../_pep8.rst:450
msgid "Immediately inside parentheses, brackets or braces::"
msgstr ""

#: ../../_pep8.rst:460
msgid "Between a trailing comma and a following close parenthesis::"
msgstr ""

#: ../../_pep8.rst:470
msgid "Immediately before a comma, semicolon, or colon::"
msgstr "بلافاصله پس از یک ویرگول، نقطه‌ویرگول یا دونقطه::"

#: ../../_pep8.rst:480
msgid ""
"However, in a slice the colon acts like a binary operator, and should have "
"equal amounts on either side (treating it as the operator with the lowest "
"priority).  In an extended slice, both colons must have the same amount of "
"spacing applied.  Exception: when a slice parameter is omitted, the space is"
" omitted::"
msgstr ""

#: ../../_pep8.rst:501
msgid ""
"Immediately before the open parenthesis that starts the argument list of a "
"function call::"
msgstr ""

#: ../../_pep8.rst:512
msgid ""
"Immediately before the open parenthesis that starts an indexing or slicing::"
msgstr ""

#: ../../_pep8.rst:523
msgid ""
"More than one space around an assignment (or other) operator to align it "
"with another::"
msgstr ""

#: ../../_pep8.rst:539
msgid "Other Recommendations"
msgstr "دیگر پیشنهادها"

#: ../../_pep8.rst:541
msgid ""
"Avoid trailing whitespace anywhere.  Because it's usually invisible, it can "
"be confusing: e.g. a backslash followed by a space and a newline does not "
"count as a line continuation marker.  Some editors don't preserve it and "
"many projects (like CPython itself) have pre-commit hooks that reject it."
msgstr ""

#: ../../_pep8.rst:547
msgid ""
"Always surround these binary operators with a single space on either side: "
"assignment (``=``), augmented assignment (``+=``, ``-=`` etc.), comparisons "
"(``==``, ``<``, ``>``, ``!=``, ``<>``, ``<=``, ``>=``, ``in``, ``not in``, "
"``is``, ``is not``), Booleans (``and``, ``or``, ``not``)."
msgstr ""

#: ../../_pep8.rst:553
msgid ""
"If operators with different priorities are used, consider adding whitespace "
"around the operators with the lowest priority(ies). Use your own judgment; "
"however, never use more than one space, and always have the same amount of "
"whitespace on both sides of a binary operator::"
msgstr ""

#: ../../_pep8.rst:575
msgid ""
"Function annotations should use the normal rules for colons and always have "
"spaces around the ``->`` arrow if present.  (See `Function Annotations`_ "
"below for more about function annotations.)::"
msgstr ""

#: ../../_pep8.rst:589
msgid ""
"Don't use spaces around the ``=`` sign when used to indicate a keyword "
"argument, or when used to indicate a default value for an *unannotated* "
"function parameter::"
msgstr ""

#: ../../_pep8.rst:604
msgid ""
"When combining an argument annotation with a default value, however, do use "
"spaces around the ``=`` sign::"
msgstr ""

#: ../../_pep8.rst:617
msgid ""
"Compound statements (multiple statements on the same line) are generally "
"discouraged::"
msgstr ""

#: ../../_pep8.rst:627 ../../_pep8.rst:637
msgid "Rather not::"
msgstr "بهتر است نباشد::"

#: ../../_pep8.rst:633
msgid ""
"While sometimes it's okay to put an if/for/while with a small body on the "
"same line, never do this for multi-clause statements.  Also avoid folding "
"such long lines!"
msgstr ""

#: ../../_pep8.rst:644
msgid "Definitely not::"
msgstr "قطعاً نه::"

#: ../../_pep8.rst:660
msgid "When to Use Trailing Commas"
msgstr "زمان استفاده از ویرگول انتهایی"

#: ../../_pep8.rst:662
msgid ""
"Trailing commas are usually optional, except they are mandatory when making "
"a tuple of one element (and in Python 2 they have semantics for the "
"``print`` statement).  For clarity, it is recommended to surround the latter"
" in (technically redundant) parentheses::"
msgstr ""

#: ../../_pep8.rst:675
msgid ""
"When trailing commas are redundant, they are often helpful when a version "
"control system is used, when a list of values, arguments or imported items "
"is expected to be extended over time.  The pattern is to put each value "
"(etc.) on a line by itself, always adding a trailing comma, and add the "
"close parenthesis/bracket/brace on the next line. However it does not make "
"sense to have a trailing comma on the same line as the closing delimiter "
"(except in the above case of singleton tuples)::"
msgstr ""

#: ../../_pep8.rst:701
msgid "Comments"
msgstr ""

#: ../../_pep8.rst:703
msgid ""
"Comments that contradict the code are worse than no comments.  Always make a"
" priority of keeping the comments up-to-date when the code changes!"
msgstr ""

#: ../../_pep8.rst:707
msgid ""
"Comments should be complete sentences.  The first word should be "
"capitalized, unless it is an identifier that begins with a lower case letter"
" (never alter the case of identifiers!)."
msgstr ""

#: ../../_pep8.rst:711
msgid ""
"Block comments generally consist of one or more paragraphs built out of "
"complete sentences, with each sentence ending in a period."
msgstr ""

#: ../../_pep8.rst:714
msgid ""
"You should use two spaces after a sentence-ending period in multi- sentence "
"comments, except after the final sentence."
msgstr ""

#: ../../_pep8.rst:717
msgid ""
"Ensure that your comments are clear and easily understandable to other "
"speakers of the language you are writing in."
msgstr ""

#: ../../_pep8.rst:720
msgid ""
"Python coders from non-English speaking countries: please write your "
"comments in English, unless you are 120% sure that the code will never be "
"read by people who don't speak your language."
msgstr ""

#: ../../_pep8.rst:725
msgid "Block Comments"
msgstr "حاشیه‌نویسی بلوکی"

#: ../../_pep8.rst:727
msgid ""
"Block comments generally apply to some (or all) code that follows them, and "
"are indented to the same level as that code.  Each line of a block comment "
"starts with a ``#`` and a single space (unless it is indented text inside "
"the comment)."
msgstr ""

#: ../../_pep8.rst:732
msgid ""
"Paragraphs inside a block comment are separated by a line containing a "
"single ``#``."
msgstr ""

#: ../../_pep8.rst:736
msgid "Inline Comments"
msgstr ""

#: ../../_pep8.rst:738
msgid "Use inline comments sparingly."
msgstr ""

#: ../../_pep8.rst:740
msgid ""
"An inline comment is a comment on the same line as a statement. Inline "
"comments should be separated by at least two spaces from the statement.  "
"They should start with a # and a single space."
msgstr ""

#: ../../_pep8.rst:744
msgid ""
"Inline comments are unnecessary and in fact distracting if they state the "
"obvious.  Don't do this::"
msgstr ""

#: ../../_pep8.rst:749
msgid "But sometimes, this is useful::"
msgstr ""

#: ../../_pep8.rst:754
msgid "Documentation Strings"
msgstr ""

#: ../../_pep8.rst:756
msgid ""
"Conventions for writing good documentation strings (a.k.a. \"docstrings\") "
"are immortalized in PEP 257."
msgstr ""

#: ../../_pep8.rst:759
msgid ""
"Write docstrings for all public modules, functions, classes, and methods.  "
"Docstrings are not necessary for non-public methods, but you should have a "
"comment that describes what the method does.  This comment should appear "
"after the ``def`` line."
msgstr ""

#: ../../_pep8.rst:764
msgid ""
"PEP 257 describes good docstring conventions.  Note that most importantly, "
"the ``\"\"\"`` that ends a multiline docstring should be on a line by "
"itself::"
msgstr ""

#: ../../_pep8.rst:773
msgid ""
"For one liner docstrings, please keep the closing ``\"\"\"`` on the same "
"line::"
msgstr ""

#: ../../_pep8.rst:780
msgid "Naming Conventions"
msgstr ""

#: ../../_pep8.rst:782
msgid ""
"The naming conventions of Python's library are a bit of a mess, so we'll "
"never get this completely consistent -- nevertheless, here are the currently"
" recommended naming standards.  New modules and packages (including third "
"party frameworks) should be written to these standards, but where an "
"existing library has a different style, internal consistency is preferred."
msgstr ""

#: ../../_pep8.rst:790
msgid "Overriding Principle"
msgstr ""

#: ../../_pep8.rst:792
msgid ""
"Names that are visible to the user as public parts of the API should follow "
"conventions that reflect usage rather than implementation."
msgstr ""

#: ../../_pep8.rst:796
msgid "Descriptive: Naming Styles"
msgstr ""

#: ../../_pep8.rst:798
msgid ""
"There are a lot of different naming styles.  It helps to be able to "
"recognize what naming style is being used, independently from what they are "
"used for."
msgstr ""

#: ../../_pep8.rst:802
msgid "The following naming styles are commonly distinguished:"
msgstr ""

#: ../../_pep8.rst:804
msgid "``b`` (single lowercase letter)"
msgstr ""

#: ../../_pep8.rst:805
msgid "``B`` (single uppercase letter)"
msgstr ""

#: ../../_pep8.rst:806
msgid "``lowercase``"
msgstr ""

#: ../../_pep8.rst:807
msgid "``lower_case_with_underscores``"
msgstr ""

#: ../../_pep8.rst:808
msgid "``UPPERCASE``"
msgstr ""

#: ../../_pep8.rst:809
msgid "``UPPER_CASE_WITH_UNDERSCORES``"
msgstr ""

#: ../../_pep8.rst:810
msgid ""
"``CapitalizedWords`` (or CapWords, or CamelCase -- so named because of the "
"bumpy look of its letters [4]_).  This is also sometimes known as "
"StudlyCaps."
msgstr ""

#: ../../_pep8.rst:814
msgid ""
"Note: When using acronyms in CapWords, capitalize all the letters of the "
"acronym.  Thus HTTPServerError is better than HttpServerError."
msgstr ""

#: ../../_pep8.rst:817
msgid ""
"``mixedCase`` (differs from CapitalizedWords by initial lowercase "
"character!)"
msgstr ""

#: ../../_pep8.rst:819
msgid "``Capitalized_Words_With_Underscores`` (ugly!)"
msgstr ""

#: ../../_pep8.rst:821
msgid ""
"There's also the style of using a short unique prefix to group related names"
" together.  This is not used much in Python, but it is mentioned for "
"completeness.  For example, the ``os.stat()`` function returns a tuple whose"
" items traditionally have names like ``st_mode``, ``st_size``, ``st_mtime`` "
"and so on.  (This is done to emphasize the correspondence with the fields of"
" the POSIX system call struct, which helps programmers familiar with that.)"
msgstr ""

#: ../../_pep8.rst:829
msgid ""
"The X11 library uses a leading X for all its public functions.  In Python, "
"this style is generally deemed unnecessary because attribute and method "
"names are prefixed with an object, and function names are prefixed with a "
"module name."
msgstr ""

#: ../../_pep8.rst:834
msgid ""
"In addition, the following special forms using leading or trailing "
"underscores are recognized (these can generally be combined with any case "
"convention):"
msgstr ""

#: ../../_pep8.rst:838
msgid ""
"``_single_leading_underscore``: weak \"internal use\" indicator. E.g. ``from"
" M import *`` does not import objects whose names start with an underscore."
msgstr ""

#: ../../_pep8.rst:842
msgid ""
"``single_trailing_underscore_``: used by convention to avoid conflicts with "
"Python keyword, e.g. ::"
msgstr ""

#: ../../_pep8.rst:847
msgid ""
"``__double_leading_underscore``: when naming a class attribute, invokes name"
" mangling (inside class FooBar, ``__boo`` becomes ``_FooBar__boo``; see "
"below)."
msgstr ""

#: ../../_pep8.rst:851
msgid ""
"``__double_leading_and_trailing_underscore__``: \"magic\" objects or "
"attributes that live in user-controlled namespaces. E.g. ``__init__``, "
"``__import__`` or ``__file__``.  Never invent such names; only use them as "
"documented."
msgstr ""

#: ../../_pep8.rst:857
msgid "Prescriptive: Naming Conventions"
msgstr ""

#: ../../_pep8.rst:860
msgid "Names to Avoid"
msgstr "نام‌های نامناسب"

#: ../../_pep8.rst:862
msgid ""
"Never use the characters 'l' (lowercase letter el), 'O' (uppercase letter "
"oh), or 'I' (uppercase letter eye) as single character variable names."
msgstr ""

#: ../../_pep8.rst:866
msgid ""
"In some fonts, these characters are indistinguishable from the numerals one "
"and zero.  When tempted to use 'l', use 'L' instead."
msgstr ""

#: ../../_pep8.rst:870
msgid "ASCII Compatibility"
msgstr "سازگاری اَسکی"

#: ../../_pep8.rst:872
msgid ""
"Identifiers used in the standard library must be ASCII compatible as "
"described in the `policy section <https://www.python.org/dev/peps/pep-3131"
"/#policy-specification>`_ of PEP 3131."
msgstr ""

#: ../../_pep8.rst:878
msgid "Package and Module Names"
msgstr "نام ماژول‌ها و بسته‌ها"

#: ../../_pep8.rst:880
msgid ""
"Modules should have short, all-lowercase names.  Underscores can be used in "
"the module name if it improves readability.  Python packages should also "
"have short, all-lowercase names, although the use of underscores is "
"discouraged."
msgstr ""

#: ../../_pep8.rst:885
msgid ""
"When an extension module written in C or C++ has an accompanying Python "
"module that provides a higher level (e.g. more object oriented) interface, "
"the C/C++ module has a leading underscore (e.g. ``_socket``)."
msgstr ""

#: ../../_pep8.rst:891
msgid "Class Names"
msgstr "نام کلاس‌ها"

#: ../../_pep8.rst:893
msgid "Class names should normally use the CapWords convention."
msgstr ""

#: ../../_pep8.rst:895
msgid ""
"The naming convention for functions may be used instead in cases where the "
"interface is documented and used primarily as a callable."
msgstr ""

#: ../../_pep8.rst:898
msgid ""
"Note that there is a separate convention for builtin names: most builtin "
"names are single words (or two words run together), with the CapWords "
"convention used only for exception names and builtin constants."
msgstr ""

#: ../../_pep8.rst:903
msgid "Type Variable Names"
msgstr ""

#: ../../_pep8.rst:905
msgid ""
"Names of type variables introduced in PEP 484 should normally use CapWords "
"preferring short names: ``T``, ``AnyStr``, ``Num``. It is recommended to add"
" suffixes ``_co`` or ``_contra`` to the variables used to declare covariant "
"or contravariant behavior correspondingly::"
msgstr ""

#: ../../_pep8.rst:916
msgid "Exception Names"
msgstr "نام استثناها"

#: ../../_pep8.rst:918
msgid ""
"Because exceptions should be classes, the class naming convention applies "
"here.  However, you should use the suffix \"Error\" on your exception names "
"(if the exception actually is an error)."
msgstr ""

#: ../../_pep8.rst:923
msgid "Global Variable Names"
msgstr "نام متغیرهای عمومی"

#: ../../_pep8.rst:925
msgid ""
"(Let's hope that these variables are meant for use inside one module only.)"
"  The conventions are about the same as those for functions."
msgstr ""

#: ../../_pep8.rst:928
msgid ""
"Modules that are designed for use via ``from M import *`` should use the "
"``__all__`` mechanism to prevent exporting globals, or use the older "
"convention of prefixing such globals with an underscore (which you might "
"want to do to indicate these globals are \"module non-public\")."
msgstr ""

#: ../../_pep8.rst:935
msgid "Function and Variable Names"
msgstr "نام توابع و متغیرها"

#: ../../_pep8.rst:937
msgid ""
"Function names should be lowercase, with words separated by underscores as "
"necessary to improve readability."
msgstr ""
"نام تابع باید از حروف کوچک تشکیل شده باشد و برای بالا بردن خوانایی، کلمات "
"باید با استفاده از زیرخط از هم جدا شوند."

#: ../../_pep8.rst:940
msgid "Variable names follow the same convention as function names."
msgstr "نام متغیرها از همان قواعد نامگذاری توابع پیروی می‌کند."

#: ../../_pep8.rst:942
msgid ""
"mixedCase is allowed only in contexts where that's already the prevailing "
"style (e.g. threading.py), to retain backwards compatibility."
msgstr ""

#: ../../_pep8.rst:947
msgid "Function and Method Arguments"
msgstr "آرگومان‌های توابع و متدها"

#: ../../_pep8.rst:949
msgid "Always use ``self`` for the first argument to instance methods."
msgstr ""

#: ../../_pep8.rst:951
msgid "Always use ``cls`` for the first argument to class methods."
msgstr ""

#: ../../_pep8.rst:953
msgid ""
"If a function argument's name clashes with a reserved keyword, it is "
"generally better to append a single trailing underscore rather than use an "
"abbreviation or spelling corruption.  Thus ``class_`` is better than "
"``clss``.  (Perhaps better is to avoid such clashes by using a synonym.)"
msgstr ""

#: ../../_pep8.rst:960
msgid "Method Names and Instance Variables"
msgstr ""

#: ../../_pep8.rst:962
msgid ""
"Use the function naming rules: lowercase with words separated by underscores"
" as necessary to improve readability."
msgstr ""

#: ../../_pep8.rst:965
msgid ""
"Use one leading underscore only for non-public methods and instance "
"variables."
msgstr ""

#: ../../_pep8.rst:968
msgid ""
"To avoid name clashes with subclasses, use two leading underscores to invoke"
" Python's name mangling rules."
msgstr ""

#: ../../_pep8.rst:971
msgid ""
"Python mangles these names with the class name: if class Foo has an "
"attribute named ``__a``, it cannot be accessed by ``Foo.__a``.  (An "
"insistent user could still gain access by calling ``Foo._Foo__a``.) "
"Generally, double leading underscores should be used only to avoid name "
"conflicts with attributes in classes designed to be subclassed."
msgstr ""

#: ../../_pep8.rst:977
msgid "Note: there is some controversy about the use of __names (see below)."
msgstr ""

#: ../../_pep8.rst:980
msgid "Constants"
msgstr "ثابت‌ها"

#: ../../_pep8.rst:982
msgid ""
"Constants are usually defined on a module level and written in all capital "
"letters with underscores separating words.  Examples include "
"``MAX_OVERFLOW`` and ``TOTAL``."
msgstr ""

#: ../../_pep8.rst:987
msgid "Designing for Inheritance"
msgstr "طراحی برای ارث‌بری"

#: ../../_pep8.rst:989
msgid ""
"Always decide whether a class's methods and instance variables "
"(collectively: \"attributes\") should be public or non-public.  If in doubt,"
" choose non-public; it's easier to make it public later than to make a "
"public attribute non-public."
msgstr ""

#: ../../_pep8.rst:994
msgid ""
"Public attributes are those that you expect unrelated clients of your class "
"to use, with your commitment to avoid backwards incompatible changes.  Non-"
"public attributes are those that are not intended to be used by third "
"parties; you make no guarantees that non-public attributes won't change or "
"even be removed."
msgstr ""

#: ../../_pep8.rst:1000
msgid ""
"We don't use the term \"private\" here, since no attribute is really private"
" in Python (without a generally unnecessary amount of work)."
msgstr ""
"اینجا ما از عبارت «خصوصی» استفاده نمی‌کنیم، به این دلیل که هیچ مشخصه‌ای در "
"پایتون واقعاً خصوصی نیست."

#: ../../_pep8.rst:1003
msgid ""
"Another category of attributes are those that are part of the \"subclass "
"API\" (often called \"protected\" in other languages).  Some classes are "
"designed to be inherited from, either to extend or modify aspects of the "
"class's behavior.  When designing such a class, take care to make explicit "
"decisions about which attributes are public, which are part of the subclass "
"API, and which are truly only to be used by your base class."
msgstr ""

#: ../../_pep8.rst:1011
msgid "With this in mind, here are the Pythonic guidelines:"
msgstr "با در نظر داشتن این نکات، راهنمای پایتونی انجام کار به این صورت است:"

#: ../../_pep8.rst:1013
msgid "Public attributes should have no leading underscores."
msgstr "مشخصه‌های عمومی نباید با زیرخط (underscore) شروع شوند."

#: ../../_pep8.rst:1015
msgid ""
"If your public attribute name collides with a reserved keyword, append a "
"single trailing underscore to your attribute name.  This is preferable to an"
" abbreviation or corrupted spelling.  (However, notwithstanding this rule, "
"'cls' is the preferred spelling for any variable or argument which is known "
"to be a class, especially the first argument to a class method.)"
msgstr ""

#: ../../_pep8.rst:1022
msgid "Note 1: See the argument name recommendation above for class methods."
msgstr ""

#: ../../_pep8.rst:1024
msgid ""
"For simple public data attributes, it is best to expose just the attribute "
"name, without complicated accessor/mutator methods.  Keep in mind that "
"Python provides an easy path to future enhancement, should you find that a "
"simple data attribute needs to grow functional behavior.  In that case, use "
"properties to hide functional implementation behind simple data attribute "
"access syntax."
msgstr ""

#: ../../_pep8.rst:1032
msgid "Note 1: Properties only work on new-style classes."
msgstr ""

#: ../../_pep8.rst:1034
msgid ""
"Note 2: Try to keep the functional behavior side-effect free, although side-"
"effects such as caching are generally fine."
msgstr ""

#: ../../_pep8.rst:1037
msgid ""
"Note 3: Avoid using properties for computationally expensive operations; the"
" attribute notation makes the caller believe that access is (relatively) "
"cheap."
msgstr ""

#: ../../_pep8.rst:1041
msgid ""
"If your class is intended to be subclassed, and you have attributes that you"
" do not want subclasses to use, consider naming them with double leading "
"underscores and no trailing underscores.  This invokes Python's name "
"mangling algorithm, where the name of the class is mangled into the "
"attribute name.  This helps avoid attribute name collisions should "
"subclasses inadvertently contain attributes with the same name."
msgstr ""

#: ../../_pep8.rst:1049
msgid ""
"Note 1: Note that only the simple class name is used in the mangled name, so"
" if a subclass chooses both the same class name and attribute name, you can "
"still get name collisions."
msgstr ""

#: ../../_pep8.rst:1053
msgid ""
"Note 2: Name mangling can make certain uses, such as debugging and "
"``__getattr__()``, less convenient.  However the name mangling algorithm is "
"well documented and easy to perform manually."
msgstr ""

#: ../../_pep8.rst:1057
msgid ""
"Note 3: Not everyone likes name mangling.  Try to balance the need to avoid "
"accidental name clashes with potential use by advanced callers."
msgstr ""

#: ../../_pep8.rst:1062
msgid "Public and Internal Interfaces"
msgstr ""

#: ../../_pep8.rst:1064
msgid ""
"Any backwards compatibility guarantees apply only to public interfaces. "
"Accordingly, it is important that users be able to clearly distinguish "
"between public and internal interfaces."
msgstr ""

#: ../../_pep8.rst:1068
msgid ""
"Documented interfaces are considered public, unless the documentation "
"explicitly declares them to be provisional or internal interfaces exempt "
"from the usual backwards compatibility guarantees. All undocumented "
"interfaces should be assumed to be internal."
msgstr ""

#: ../../_pep8.rst:1073
msgid ""
"To better support introspection, modules should explicitly declare the names"
" in their public API using the ``__all__`` attribute. Setting ``__all__`` to"
" an empty list indicates that the module has no public API."
msgstr ""

#: ../../_pep8.rst:1077
msgid ""
"Even with ``__all__`` set appropriately, internal interfaces (packages, "
"modules, classes, functions, attributes or other names) should still be "
"prefixed with a single leading underscore."
msgstr ""

#: ../../_pep8.rst:1081
msgid ""
"An interface is also considered internal if any containing namespace "
"(package, module or class) is considered internal."
msgstr ""

#: ../../_pep8.rst:1084
msgid ""
"Imported names should always be considered an implementation detail. Other "
"modules must not rely on indirect access to such imported names unless they "
"are an explicitly documented part of the containing module's API, such as "
"``os.path`` or a package's ``__init__`` module that exposes functionality "
"from submodules."
msgstr ""

#: ../../_pep8.rst:1092
msgid "Programming Recommendations"
msgstr ""

#: ../../_pep8.rst:1094
msgid ""
"Code should be written in a way that does not disadvantage other "
"implementations of Python (PyPy, Jython, IronPython, Cython, Psyco, and "
"such)."
msgstr ""

#: ../../_pep8.rst:1098
msgid ""
"For example, do not rely on CPython's efficient implementation of in-place "
"string concatenation for statements in the form ``a += b`` or ``a = a + b``."
"  This optimization is fragile even in CPython (it only works for some "
"types) and isn't present at all in implementations that don't use "
"refcounting.  In performance sensitive parts of the library, the "
"``''.join()`` form should be used instead.  This will ensure that "
"concatenation occurs in linear time across various implementations."
msgstr ""

#: ../../_pep8.rst:1107
msgid ""
"Comparisons to singletons like None should always be done with ``is`` or "
"``is not``, never the equality operators."
msgstr ""

#: ../../_pep8.rst:1110
msgid ""
"Also, beware of writing ``if x`` when you really mean ``if x is not None`` "
"-- e.g. when testing whether a variable or argument that defaults to None "
"was set to some other value.  The other value might have a type (such as a "
"container) that could be false in a boolean context!"
msgstr ""

#: ../../_pep8.rst:1116
msgid ""
"Use ``is not`` operator rather than ``not ... is``.  While both expressions "
"are functionally identical, the former is more readable and preferred::"
msgstr ""

#: ../../_pep8.rst:1128
msgid ""
"When implementing ordering operations with rich comparisons, it is best to "
"implement all six operations (``__eq__``, ``__ne__``, ``__lt__``, "
"``__le__``, ``__gt__``, ``__ge__``) rather than relying on other code to "
"only exercise a particular comparison."
msgstr ""

#: ../../_pep8.rst:1133
msgid ""
"To minimize the effort involved, the ``functools.total_ordering()`` "
"decorator provides a tool to generate missing comparison methods."
msgstr ""

#: ../../_pep8.rst:1136
msgid ""
"PEP 207 indicates that reflexivity rules *are* assumed by Python. Thus, the "
"interpreter may swap ``y > x`` with ``x < y``, ``y >= x`` with ``x <= y``, "
"and may swap the arguments of ``x == y`` and ``x != y``.  The ``sort()`` and"
" ``min()`` operations are guaranteed to use the ``<`` operator and the "
"``max()`` function uses the ``>`` operator.  However, it is best to "
"implement all six operations so that confusion doesn't arise in other "
"contexts."
msgstr ""

#: ../../_pep8.rst:1144
msgid ""
"Always use a def statement instead of an assignment statement that binds a "
"lambda expression directly to an identifier::"
msgstr ""

#: ../../_pep8.rst:1155
msgid ""
"The first form means that the name of the resulting function object is "
"specifically 'f' instead of the generic '<lambda>'. This is more useful for "
"tracebacks and string representations in general. The use of the assignment "
"statement eliminates the sole benefit a lambda expression can offer over an "
"explicit def statement (i.e. that it can be embedded inside a larger "
"expression)"
msgstr ""

#: ../../_pep8.rst:1162
msgid ""
"Derive exceptions from ``Exception`` rather than ``BaseException``. Direct "
"inheritance from ``BaseException`` is reserved for exceptions where catching"
" them is almost always the wrong thing to do."
msgstr ""

#: ../../_pep8.rst:1166
msgid ""
"Design exception hierarchies based on the distinctions that code *catching* "
"the exceptions is likely to need, rather than the locations where the "
"exceptions are raised. Aim to answer the question \"What went wrong?\" "
"programmatically, rather than only stating that \"A problem occurred\" (see "
"PEP 3151 for an example of this lesson being learned for the builtin "
"exception hierarchy)"
msgstr ""

#: ../../_pep8.rst:1173
msgid ""
"Class naming conventions apply here, although you should add the suffix "
"\"Error\" to your exception classes if the exception is an error.  Non-error"
" exceptions that are used for non-local flow control or other forms of "
"signaling need no special suffix."
msgstr ""

#: ../../_pep8.rst:1178
msgid ""
"Use exception chaining appropriately. In Python 3, \"raise X from Y\" should"
" be used to indicate explicit replacement without losing the original "
"traceback."
msgstr ""

#: ../../_pep8.rst:1182
msgid ""
"When deliberately replacing an inner exception (using \"raise X\" in Python "
"2 or \"raise X from None\" in Python 3.3+), ensure that relevant details are"
" transferred to the new exception (such as preserving the attribute name "
"when converting KeyError to AttributeError, or embedding the text of the "
"original exception in the new exception message)."
msgstr ""

#: ../../_pep8.rst:1189
msgid ""
"When raising an exception in Python 2, use ``raise ValueError('message')`` "
"instead of the older form ``raise ValueError, 'message'``."
msgstr ""

#: ../../_pep8.rst:1192
msgid "The latter form is not legal Python 3 syntax."
msgstr ""

#: ../../_pep8.rst:1194
msgid ""
"The paren-using form also means that when the exception arguments are long "
"or include string formatting, you don't need to use line continuation "
"characters thanks to the containing parentheses."
msgstr ""

#: ../../_pep8.rst:1198
msgid ""
"When catching exceptions, mention specific exceptions whenever possible "
"instead of using a bare ``except:`` clause::"
msgstr ""

#: ../../_pep8.rst:1206
msgid ""
"A bare ``except:`` clause will catch SystemExit and KeyboardInterrupt "
"exceptions, making it harder to interrupt a program with Control-C, and can "
"disguise other problems.  If you want to catch all exceptions that signal "
"program errors, use ``except Exception:`` (bare except is equivalent to "
"``except BaseException:``)."
msgstr ""

#: ../../_pep8.rst:1213
msgid ""
"A good rule of thumb is to limit use of bare 'except' clauses to two cases:"
msgstr ""

#: ../../_pep8.rst:1216
msgid ""
"If the exception handler will be printing out or logging the traceback; at "
"least the user will be aware that an error has occurred."
msgstr ""

#: ../../_pep8.rst:1220
msgid ""
"If the code needs to do some cleanup work, but then lets the exception "
"propagate upwards with ``raise``.  ``try...finally`` can be a better way to "
"handle this case."
msgstr ""

#: ../../_pep8.rst:1224
msgid ""
"When binding caught exceptions to a name, prefer the explicit name binding "
"syntax added in Python 2.6::"
msgstr ""

#: ../../_pep8.rst:1232
msgid ""
"This is the only syntax supported in Python 3, and avoids the ambiguity "
"problems associated with the older comma-based syntax."
msgstr ""

#: ../../_pep8.rst:1235
msgid ""
"When catching operating system errors, prefer the explicit exception "
"hierarchy introduced in Python 3.3 over introspection of ``errno`` values."
msgstr ""

#: ../../_pep8.rst:1239
msgid ""
"Additionally, for all try/except clauses, limit the ``try`` clause to the "
"absolute minimum amount of code necessary.  Again, this avoids masking "
"bugs::"
msgstr ""

#: ../../_pep8.rst:1261
msgid ""
"When a resource is local to a particular section of code, use a ``with`` "
"statement to ensure it is cleaned up promptly and reliably after use. A "
"try/finally statement is also acceptable."
msgstr ""

#: ../../_pep8.rst:1265
msgid ""
"Context managers should be invoked through separate functions or methods "
"whenever they do something other than acquire and release resources::"
msgstr ""

#: ../../_pep8.rst:1278
msgid ""
"The latter example doesn't provide any information to indicate that the "
"``__enter__`` and ``__exit__`` methods are doing something other than "
"closing the connection after a transaction.  Being explicit is important in "
"this case."
msgstr ""

#: ../../_pep8.rst:1283
msgid ""
"Be consistent in return statements.  Either all return statements in a "
"function should return an expression, or none of them should.  If any return"
" statement returns an expression, any return statements where no value is "
"returned should explicitly state this as ``return None``, and an explicit "
"return statement should be present at the end of the function (if "
"reachable)::"
msgstr ""

#: ../../_pep8.rst:1316
msgid "Use string methods instead of the string module."
msgstr ""

#: ../../_pep8.rst:1318
msgid ""
"String methods are always much faster and share the same API with unicode "
"strings.  Override this rule if backwards compatibility with Pythons older "
"than 2.0 is required."
msgstr ""

#: ../../_pep8.rst:1322
msgid ""
"Use ``''.startswith()`` and ``''.endswith()`` instead of string slicing to "
"check for prefixes or suffixes."
msgstr ""

#: ../../_pep8.rst:1325
msgid "startswith() and endswith() are cleaner and less error prone::"
msgstr ""

#: ../../_pep8.rst:1335
msgid ""
"Object type comparisons should always use isinstance() instead of comparing "
"types directly::"
msgstr ""

#: ../../_pep8.rst:1346
msgid ""
"When checking if an object is a string, keep in mind that it might be a "
"unicode string too!  In Python 2, str and unicode have a common base class, "
"basestring, so you can do::"
msgstr ""

#: ../../_pep8.rst:1352
msgid ""
"Note that in Python 3, ``unicode`` and ``basestring`` no longer exist (there"
" is only ``str``) and a bytes object is no longer a kind of string (it is a "
"sequence of integers instead)."
msgstr ""

#: ../../_pep8.rst:1356
msgid ""
"For sequences, (strings, lists, tuples), use the fact that empty sequences "
"are false::"
msgstr ""

#: ../../_pep8.rst:1369
msgid ""
"Don't write string literals that rely on significant trailing whitespace.  "
"Such trailing whitespace is visually indistinguishable and some editors (or "
"more recently, reindent.py) will trim them."
msgstr ""

#: ../../_pep8.rst:1373
msgid "Don't compare boolean values to True or False using ``==``::"
msgstr ""

#: ../../_pep8.rst:1383
msgid "Worse::"
msgstr ""

#: ../../_pep8.rst:1388
msgid ""
"Use of the flow control statements ``return``/``break``/``continue`` within "
"the finally suite of a ``try...finally``, where the flow control statement "
"would jump outside the finally suite, is discouraged.  This is because such "
"statements will implicitly cancel any active exception that is propagating "
"through the finally suite::"
msgstr ""

#: ../../_pep8.rst:1402
msgid "Function Annotations"
msgstr ""

#: ../../_pep8.rst:1404
msgid ""
"With the acceptance of PEP 484, the style rules for function annotations are"
" changing."
msgstr ""

#: ../../_pep8.rst:1407
msgid ""
"In order to be forward compatible, function annotations in Python 3 code "
"should preferably use PEP 484 syntax.  (There are some formatting "
"recommendations for annotations in the previous section.)"
msgstr ""

#: ../../_pep8.rst:1411
msgid ""
"The experimentation with annotation styles that was recommended previously "
"in this PEP is no longer encouraged."
msgstr ""

#: ../../_pep8.rst:1414
msgid ""
"However, outside the stdlib, experiments within the rules of PEP 484 are now"
" encouraged.  For example, marking up a large third party library or "
"application with PEP 484 style type annotations, reviewing how easy it was "
"to add those annotations, and observing whether their presence increases "
"code understandability."
msgstr ""

#: ../../_pep8.rst:1420
msgid ""
"The Python standard library should be conservative in adopting such "
"annotations, but their use is allowed for new code and for big refactorings."
msgstr ""

#: ../../_pep8.rst:1424
msgid ""
"For code that wants to make a different use of function annotations it is "
"recommended to put a comment of the form::"
msgstr ""

#: ../../_pep8.rst:1429
msgid ""
"near the top of the file; this tells type checker to ignore all annotations."
"  (More fine-grained ways of disabling complaints from type checkers can be "
"found in PEP 484.)"
msgstr ""

#: ../../_pep8.rst:1433
msgid ""
"Like linters, type checkers are optional, separate tools.  Python "
"interpreters by default should not issue any messages due to type checking "
"and should not alter their behavior based on annotations."
msgstr ""

#: ../../_pep8.rst:1437
msgid ""
"Users who don't want to use type checkers are free to ignore them. However, "
"it is expected that users of third party library packages may want to run "
"type checkers over those packages.  For this purpose PEP 484 recommends the "
"use of stub files: .pyi files that are read by the type checker in "
"preference of the corresponding .py files. Stub files can be distributed "
"with a library, or separately (with the library author's permission) through"
" the typeshed repo [5]_."
msgstr ""

#: ../../_pep8.rst:1445
msgid ""
"For code that needs to be backwards compatible, type annotations can be "
"added in the form of comments.  See the relevant section of PEP 484 [6]_."
msgstr ""

#: ../../_pep8.rst:1450
msgid "Variable Annotations"
msgstr ""

#: ../../_pep8.rst:1452
msgid ""
"PEP 526 introduced variable annotations. The style recommendations for them "
"are similar to those on function annotations described above:"
msgstr ""

#: ../../_pep8.rst:1455
msgid ""
"Annotations for module level variables, class and instance variables, and "
"local variables should have a single space after the colon."
msgstr ""

#: ../../_pep8.rst:1458
msgid "There should be no space before the colon."
msgstr ""

#: ../../_pep8.rst:1460
msgid ""
"If an assignment has a right hand side, then the equality sign should have "
"exactly one space on both sides::"
msgstr ""

#: ../../_pep8.rst:1481
msgid ""
"Although the PEP 526 is accepted for Python 3.6, the variable annotation "
"syntax is the preferred syntax for stub files on all versions of Python (see"
" PEP 484 for details)."
msgstr ""

#: ../../_pep8.rst:1486
msgid "Footnotes"
msgstr ""

#: ../../_pep8.rst:1487
msgid ""
"*Hanging indentation* is a type-setting style where all the lines in a "
"paragraph are indented except the first line.  In the context of Python, the"
" term is used to describe a style where the opening parenthesis of a "
"parenthesized statement is the last non-whitespace character of the line, "
"with subsequent lines being indented until the closing parenthesis."
msgstr ""

#: ../../_pep8.rst:1496
msgid "References"
msgstr "منابع"

#: ../../_pep8.rst:1498
msgid "PEP 7, Style Guide for C Code, van Rossum"
msgstr ""

#: ../../_pep8.rst:1500
msgid ""
"Barry's GNU Mailman style guide "
"http://barry.warsaw.us/software/STYLEGUIDE.txt"
msgstr ""

#: ../../_pep8.rst:1503
msgid "Donald Knuth's *The TeXBook*, pages 195 and 196."
msgstr ""

#: ../../_pep8.rst:1505
msgid "http://www.wikipedia.com/wiki/CamelCase"
msgstr ""

#: ../../_pep8.rst:1507
msgid "Typeshed repo https://github.com/python/typeshed"
msgstr ""

#: ../../_pep8.rst:1510
msgid ""
"Suggested syntax for Python 2.7 and straddling code "
"https://www.python.org/dev/peps/pep-0484/#suggested-syntax-for-python-2-7"
"-and-straddling-code"
msgstr ""

#: ../../_pep8.rst:1515
msgid "Copyright"
msgstr "کپی‌رایت"

#: ../../_pep8.rst:1517
msgid "This document has been placed in the public domain."
msgstr "این شیوه‌نامه به صورت آزاد در دسترس همگان قرار گرفته است."
